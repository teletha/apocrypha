---
import i18next from "i18next";
// @ts-ignore
import { localizePath } from "astro-i18next";
import ISO6991 from "iso-639-1";

interface languageMapping {
  [localeCode: string]: string;
}

export interface Props extends astroHTML.JSX.SelectHTMLAttributes {
  languageMapping?: languageMapping;
}

const supportedLanguages = i18next.languages;
// const currentLanguage = i18next.language;

const { pathname } = Astro.url;

const { languageMapping } = Astro.props;
---

<div class="language-selector ml-1">
  <button type="button" class="btn">
    <i class="iconfont ic-language icon"></i>
  </button>
  <div class="dropdown-wrapper">
    <ul id="language-selector-dropdown" class="dropdown">
      {
        supportedLanguages.map((supportedLanguage: string, index: number) => {
          let value = localizePath(pathname, supportedLanguage);

          let nativeName = "";
          if (
            languageMapping &&
            languageMapping.hasOwnProperty(supportedLanguage)
          ) {
            nativeName = languageMapping[supportedLanguage];
          } else {
            nativeName = ISO6991.getNativeName(supportedLanguage);
          }

          return (
            (index && (
              <li class="selection language-selection" data-target={value}>
                <span class="-translate-y-[1px] align-top leading-[0]">
                  {nativeName}
                </span>
              </li>
            )) || (
              <li class="selection-selected" data-target={value}>
                <span class="-translate-y-[1px] align-top leading-[0]">
                  {nativeName}
                </span>
              </li>
            )
          );
        })
      }
    </ul>
  </div>
</div>

<style>
  .language-selector {
    @apply relative;
  }

  .btn {
    @apply rounded-lg px-3 py-2 text-[var(--text-color)] transition-all;
    @apply hover:bg-[var(--primary-color-hover)] hover:text-[var(--primary-color)];
  }

  .icon {
    @apply stroke-2 text-xl;
  }

  .language-selector:hover .dropdown-wrapper,
  .dropdown-wrapper:hover .dropdown-wrapper {
    @apply block;
  }

  .dropdown-wrapper {
    @apply absolute top-0 hidden h-12 w-11 translate-y-11;
  }

  .dropdown {
    @apply absolute -bottom-24 -left-1/2 flex w-32 flex-col space-y-1 rounded-lg bg-[var(--card-color-transparent)] p-1;
    opacity: 0;
    animation: 300ms fade-in-down;
    animation-fill-mode: forwards;
  }

  .selection {
    @apply flex select-none flex-row items-center rounded-md pl-2 pr-4 text-[var(--text-color)] transition-all hover:bg-[var(--primary-color-hover)] hover:text-[var(--primary-color)];
    font-family: var(--primary-font);
  }

  .selection-selected {
    @apply flex select-none flex-row items-center rounded-md bg-[var(--primary-color-hover)] p-2 pr-4 text-[var(--primary-color)] transition-all;
    font-family: var(--primary-font);
  }

  .selection::before {
    @apply mr-2 h-1 w-1 rounded-md bg-[var(--primary-color)] transition-all;
    @apply hover:mr-3 hover:h-4;
    content: "";
  }

  .selection::after {
    @apply h-10;
    content: "";
  }

  .selection-selected::before {
    @apply mr-3 h-4 w-1 rounded-md bg-[var(--primary-color)];
    content: "";
  }

  .selection-selected::after {
    @apply h-6;
    content: "";
  }

  @keyframes fade-in-down {
    0% {
      transform: translateY(1rem);
      opacity: 0;
    }

    100% {
      transform: translateY(0.5rem);
      opacity: 1;
    }
  }
</style>
